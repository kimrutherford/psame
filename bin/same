#!/usr/bin/perl -w

use strict;

use Text::Same;
use Text::Same::TextUI qw( draw_match draw_non_matches );

use Getopt::Std;

my %command_line_options = ();
getopts('aviBbVynNC:s:x:S:r:', \%command_line_options);

# set defaults
my %options = (side_by_side => 1);

$options{ignore_case} = $command_line_options{i};
$options{ignore_blanks} = $command_line_options{B};
$options{ignore_space} = $command_line_options{b};
$options{ignore_simple} = $command_line_options{s};
$options{side_by_side} = 0 if defined $command_line_options{V};
$options{side_by_side} = 1 if defined $command_line_options{y};
$options{term_width} = $command_line_options{x};
$options{min_score} = $command_line_options{S};
$options{revision} = $command_line_options{r};
$options{context} = $command_line_options{C};

$options{show_matches} = 1;

if (exists $command_line_options{n}) {
  $options{show_non_matches} = 1;
  $options{show_matches} = 0;
}

if (exists $command_line_options{N}) {
  $options{show_matches} = 1;
  $options{show_non_matches} = 1;
}

if (exists $command_line_options{a}) {
  $options{ignore_case} = 1;
  $options{ignore_blanks} = 1;
  $options{ignore_space} = 1;
  $options{ignore_simple} = 2;
  $options{side_by_side} = 1;
  $options{min_score} = 3;
  $options{show_matches} = 1;
  $options{show_non_matches} = 1;
}

sub usage
{
  die <<USAGE;
usage:
  $0 [options] file1 file2
or
  $0 [options] file
or
  $0 [options] [-r version] file

options:
   -b       ignore changes in whitespace
   -i       ignore case
   -B       ignore blank lines
   -s <num> ignore simple/short lines (ie. less than <num> chars>
   -y       side-by-side match view (default)
   -V       vertical match view
   -n       show non-matches instead of matches
   -N       show matches and non-matches
   -x <wid> set terminal width in columns (normally guessed)
   -r <ver> compare with <version> from SVN, CVS or RCS
   -S <num> only show matches with score higher than <num>
   -C <num> number of lines of context
   -a       apply (a)ll useful options - sets the following options
              -B -b -i -s 2 -S 3 -N

The first usage compares the two files.
The second usage compare the given file with the latest version from
Subversion, CVS or RCS.
The third usage will compare against a given version from Subversion, CVS or
RCS.
USAGE
}

if (@ARGV < 1 or @ARGV > 2) {
  usage;
}

if (@ARGV == 1) {
  my $revision = "";

  if (defined $options{revision}) {
    $revision = "-r $options{revision} ";
  }

  if (-d ".svn") {
    push @ARGV, "svn cat $revision$ARGV[0]|";
  } else {
    if (-d "CVS") {
      push @ARGV, "cvs up $revision-p $ARGV[0]|";
    } else {
      if (-e "$ARGV[0],v") {
        push @ARGV, "co $revision-p $ARGV[0]|";
      } else {
        usage;
      }
    }
  }
}

if (!defined $options{term_width}) {
  $options{term_width} = eval "require Term::Size; Term::Size::chars()";

  if ($@ or $options{term_width} == 0) {
    # pick a default
    $options{term_width} = 80;
  }
}

my $file1 = $ARGV[0];
my $file2 = $ARGV[1];

my $matchmap = compare(\%options, $file1, $file2);

if ($options{show_matches}) {
  my @matches = $matchmap->matches;

  for my $match (@matches) {
    if (!defined $options{min_score} or $match->score >= $options{min_score}) {
      print draw_match(\%options, $match);
    }
  }
}

if ($options{show_non_matches}) {
  my @source1_non_matches = $matchmap->source1_non_matches;
  my @source2_non_matches = $matchmap->source2_non_matches;

  print "non matches in $file1:\n";
  draw_non_matches(\%options, \@source1_non_matches, $matchmap->source1);
  print "non matches in $file2:\n";
  draw_non_matches(\%options, \@source2_non_matches, $matchmap->source2);
}
